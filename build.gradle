import groovy.io.FileType
import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

plugins {
  id 'org.springframework.boot' version '2.5.0'
  id 'io.spring.dependency-management' version '1.0.11.RELEASE'
  id 'org.openapi.generator' version '5.1.1'
  id 'org.sonarqube' version '3.2.0'
  id 'org.barfuin.gradle.taskinfo' version '1.1.0'
  id 'java'
  id 'groovy'
  id 'jacoco'
}

group = 'com.renke'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_11

configurations {
  compileOnly.extendsFrom annotationProcessor

  testCompileOnly.extendsFrom annotationProcessor
  testAnnotationProcessor.extendsFrom annotationProcessor

  integrationImplementation.extendsFrom testImplementation
  integrationRuntimeOnly.extendsFrom testRuntimeOnly
  integrationAnnotationProcessor.extendsFrom annotationProcessor

  scriptImplementation.extendsFrom implementation
}

sourceSets {
  main {
    java.srcDirs += "$buildDir/generated/sources/openapigenerator/java/main"
    java.srcDirs += "$buildDir/generated/sources/annotationProcessors/java/main"
  }
  integration {
    compileClasspath += sourceSets.test.compileClasspath
    runtimeClasspath += sourceSets.test.runtimeClasspath
  }
  script {
    compileClasspath += sourceSets.main.compileClasspath
    runtimeClasspath += sourceSets.main.runtimeClasspath
  }
}

repositories {
  mavenCentral()
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'org.flywaydb:flyway-core'
  implementation 'io.github.openfeign:feign-okhttp'
  implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8'
  implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
  implementation 'org.openapitools:jackson-databind-nullable:0.2.1'
  implementation 'io.springfox:springfox-boot-starter:3.0.0'
  implementation 'org.mapstruct:mapstruct:1.4.2.Final'
  implementation 'org.jooq:jool:0.9.14'

  compileOnly 'org.springframework.boot:spring-boot-configuration-processor'

  developmentOnly 'org.springframework.boot:spring-boot-devtools'

  runtimeOnly 'com.h2database:h2'

  annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
  annotationProcessor 'org.projectlombok:lombok'
  annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.jeasy:easy-random-core:5.0.0'
  testImplementation 'org.mockito:mockito-inline:3.9.0'

  integrationImplementation('io.rest-assured:rest-assured') {
    exclude group: 'com.sun.xml.bind', module: 'jaxb-osgi'
    exclude group: 'org.codehaus.groovy'
  }
  integrationImplementation 'org.codehaus.groovy:groovy-all:3.0.8'
  integrationImplementation 'com.github.tomakehurst:wiremock:2.27.2'
  integrationImplementation 'com.github.curious-odd-man:rgxgen:1.3'

  scriptImplementation 'org.codehaus.groovy:groovy-all:3.0.8'
  scriptImplementation 'org.jsoup:jsoup:1.13.1'
}

dependencyManagement {
  imports {
    mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2020.0.2'
  }
}

jacoco {
  toolVersion '0.8.6'
}

jacocoTestReport {
  reports {
    xml.enabled true
    html.enabled true
    csv.enabled false
  }
  afterEvaluate {
    classDirectories.from = files(classDirectories.files.collect {
      fileTree(dir: it, exclude: ['com/renke/resauce/mapper/generated/**'])
    })
  }
}

sonarqube {
  properties {
    property 'sonar.projectKey', 'renke0_resauce'
    property 'sonar.organization', 'renke0-github'
    property 'sonar.host.url', 'https://sonarcloud.io'
    property 'sonar.coverage.jacoco.xmlReportPaths', "$buildDir/reports/jacoco/jacocoTestReport.xml"
    properties['sonar.tests'] += sourceSets.integration.java.srcDirs
  }
}

// unit
test {
  useJUnitPlatform()
  finalizedBy jacocoTestReport
}

// integration
task integration(type: Test) {
  description = 'Run integration tests'
  group = 'verification'

  testClassesDirs = sourceSets.integration.output.classesDirs
  classpath = sourceSets.integration.runtimeClasspath
  shouldRunAfter test
}

integration {
  useJUnitPlatform()
}

check.dependsOn integration

// OpenApi
tasks.openApiGenerate.configure {
  onlyIf { false }
}

tasks.compileJava.dependsOn tasks.openApiGenerate

def dir = new File("$rootDir/src/main/resources/api/".toString())
dir.eachFileRecurse(FileType.FILES) { File file ->
  if (file.name.endsWithAny('.yaml', '.yml')) {
    def apiName = file.name.substring(0, file.name.lastIndexOf('.'))
    def taskName = 'openApiGenerate' + apiName.capitalize()
    def subPackage = apiName == rootProject.name ? '' : ".$apiName"
    tasks.openApiGenerate.dependsOn tasks.register(taskName, GenerateTask) {
      generatorName = 'spring'
      inputSpec = "$rootDir/src/main/resources/api/$file.name"
      outputDir = "$buildDir/generated/sources/openapigenerator"
      modelNameSuffix = 'Model'
      templateDir = "$rootDir/src/main/resources/templates"
      configOptions = [
        debugSupportingFiles: 'true',
        sourceFolder: '/java/main',
        apiPackage: "com.renke.resauce.api$subPackage",
        modelPackage: "com.renke.resauce.model$subPackage",
        additionalModelTypeAnnotations: '@lombok.Generated',
        additionalEnumTypeAnnotations: '@lombok.Generated',
        dateLibrary: 'java8',
        interfaceOnly: 'true',
        skipDefaultInterface: 'true',
        performBeanValidation: 'true',
        useTags: 'true',
        useOptional: 'true'
      ]
    }
  }
}

// scrappers
task updateItemList(type: JavaExec) {
  main = 'com.renke.resauce.scripts.ItemScrapper'
  classpath = sourceSets.script.runtimeClasspath
  args sourceSets.main.output.resourcesDir
}

task updateClientInfo(type: JavaExec) {
  main = 'com.renke.resauce.scripts.ClientScrapper'
  classpath = sourceSets.script.runtimeClasspath
  args sourceSets.main.output.resourcesDir
}

tasks.assemble.finalizedBy updateItemList
tasks.assemble.finalizedBy updateClientInfo
